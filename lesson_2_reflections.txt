- What happens when you initialize a repository? Why do you need to do it?

Git starts tracking by adding some hidden files under ".git" directory in the directory it has been initialized.
We initialize the repo to start writing history of the changes.

(git init)

- How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an intermediate level between the repository and the working directory allowing more control
over the files we want to be tracked by git.

(git commit)
(git commit -m "Commit message")

Udacity Git Commit Message Style Guide: http://udacity.github.io/git-styleguide/

- How can you use the staging area to make sure you have one commit per logical change?

By staging the file after the logical change.

- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When want to create an experimental branch or a different version of the original. That way can keep both versions.

(git branch)
(git branch "name of branch")

(git log --graph --oneline master coins)

(git checkout -b "new branch name") creates a new branch and checks out on that branch

How do the diagrams help you visualize the branch structure?

By visually aiding in showing in which commit the new branch started.

Merge: First checkout the main branch you want to merge with the secondary branch then:

(git merge "name of brance to merge with current checked out branch")

Since the "name of brance to merge with current checked out branch" is no longer needed we can delete it like so:

(git branch -d "name of brance to merge with current checked out branch")

this will NOT delete the commits in the branch but ONLY the label.

(git show "commit number")
Since merged branches include commits from different branches the commits that show sequencially with git log might not be
actually parent-child. So, git show shows the differences of a commit compared to its parent without actually knowing the parent.

- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a new commit with the branches merged. We make the diagram show that the two branches come together into one, to
represent the merge.
